name: Docker Compose 기반 Spring Boot 앱 배포

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest

    steps:
      - name: GitHub 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle 빌드 (테스트 제외)
        run: ./gradlew build -x test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: test_db
          DB_USERNAME: test
          DB_PASSWORD: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          TOUR_API_KEY: ${{ secrets.TOUR_API_KEY }}

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/swyp10-9-backend:latest

  deploy-to-server:
    name: 서버에 Docker Compose로 배포
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH 접속 및 서버의 docker-compose.yml 사용하여 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /root
            
            echo "🗑️ 기존 컨테이너 및 네트워크 정리"
            docker-compose down --remove-orphans || true
            
            echo "🗑️ 기존 이미지 삭제"
            docker rmi ${{ secrets.DOCKER_USERNAME }}/swyp10-9-backend:latest || true
            
            echo "🔧 환경변수 설정"
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
            # 데이터베이스 설정
            export DB_HOST=mariadb
            export DB_PORT=3306
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            # JWT 설정
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}"
            export JWT_REFRESH_EXPIRATION="${{ secrets.JWT_REFRESH_EXPIRATION }}"
            
            # 카카오 OAuth 설정
            export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
            export KAKAO_REDIRECT_PATH="${{ secrets.KAKAO_REDIRECT_PATH }}"
            export KAKAO_REDIRECT_URI="${{ secrets.KAKAO_REDIRECT_URI }}"
            export KAKAO_TOKEN_URL="${{ secrets.KAKAO_TOKEN_URL }}"
            export KAKAO_USER_INFO_URL="${{ secrets.KAKAO_USER_INFO_URL }}"
            
            # TourAPI 설정
            export TOUR_API_KEY="${{ secrets.TOUR_API_KEY }}"
            export PAGE_SIZE="${{ secrets.PAGE_SIZE }}"
            export EVENT_START_DATE="${{ secrets.EVENT_START_DATE }}"
            export EVENT_END_DATE="${{ secrets.EVENT_END_DATE }}"
            
            # 서버 설정
            export SERVER_PORT=8080
            
            echo "📥 최신 이미지 다운로드"
            docker-compose pull
            
            echo "🚀 Docker Compose로 서비스 시작"
            docker-compose up -d
            
            echo "⏳ 컨테이너 시작 대기"
            sleep 15
            
            echo "✅ 배포 완료! 실행 중인 컨테이너 확인:"
            docker-compose ps
            docker-compose logs --tail=30