name: Docker Compose 기반 Spring Boot 앱 배포

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest

    steps:
      - name: GitHub 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle 빌드 (테스트 제외)
        run: ./gradlew build -x test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: test_db
          DB_USERNAME: test
          DB_PASSWORD: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          TOUR_API_KEY: ${{ secrets.TOUR_API_KEY }}

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/swyp10-9-backend:latest

  deploy-to-server:
    name: 서버에 Docker Compose로 배포
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: GitHub 레포지토리 체크아웃 (배포용)
        uses: actions/checkout@v4

      - name: SSH 접속 및 파일 업로드 후 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /root

            echo "🗑️ 기존 컨테이너 및 네트워크 정리"
            docker-compose down --remove-orphans || true

            echo "🗑️ 기존 이미지 삭제"
            docker rmi ${{ secrets.DOCKER_USERNAME }}/swyp10-9-backend:latest || true
            
            echo "🧹 MariaDB 데이터 디렉토리 완전 삭제"
            sudo rm -rf mariadb-data/ || true
            sudo rm -rf ./mariadb-data || true

            echo "🧹 Docker 시스템 정리"
            docker system prune -f || true
            docker volume prune -f || true

      - name: docker-compose.yml 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "docker-compose.yml"
          target: "/root/"

      - name: init-db 폴더 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "init-db/"
          target: "/root/"

      - name: 배포 실행
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /root

            echo "🔧 .env 파일 생성"
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

            # 데이터베이스 설정
            DB_HOST=mariadb
            DB_PORT=3306
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            # 서버 설정
            SERVER_PORT=8080

            # JWT 설정
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}

            # 카카오 OAuth 설정
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_PATH=${{ secrets.KAKAO_REDIRECT_PATH }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            KAKAO_TOKEN_URL=${{ secrets.KAKAO_TOKEN_URL }}
            KAKAO_USER_INFO_URL=${{ secrets.KAKAO_USER_INFO_URL }}

            # TourAPI 설정
            TOUR_API_KEY=${{ secrets.TOUR_API_KEY }}
            PAGE_SIZE=${{ secrets.PAGE_SIZE }}
            EVENT_START_DATE=${{ secrets.EVENT_START_DATE }}
            EVENT_END_DATE=${{ secrets.EVENT_END_DATE }}
            EOF

            echo "✅ 업로드된 파일 확인:"
            ls -la docker-compose.yml
            ls -la init-db/

            echo "🔍 환경 변수 적용 확인:"
            docker-compose config

            echo "📥 최신 이미지 다운로드"
            docker-compose pull

            echo "🚀 Docker Compose로 서비스 시작 (완전 새로 시작)"
            docker-compose up -d

            echo "⏳ MariaDB 완전 초기화 대기 (120초)"
            sleep 120

            echo "🔍 MariaDB 초기화 상태 확인"
            docker exec mariadb mysql -uroot -p${{ secrets.DB_PASSWORD }} -e "SELECT User, Host FROM mysql.user WHERE User='root'; SHOW DATABASES;" || echo "DB 확인 실패 - 추가 대기 필요"

            echo "✅ 배포 완료! 실행 중인 컨테이너 확인:"
            docker-compose ps
            echo "🔍 백엔드 서비스 로그:"
            docker-compose logs --tail=50 backend
            echo "🔍 MariaDB 서비스 로그:"
            docker-compose logs --tail=20 mariadb